<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<title>Client Mapping Tool</title>
		<meta name="author" content="Andre Britton">
		<link href="http://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.3/leaflet.css" rel="stylesheet">
		<link href="//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css" rel="stylesheet">
	<!-- Bootstrap core CSS --> 
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css" rel="stylesheet"> 
	<!-- Bootstrap theme --> 
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap-theme.min.css" rel="stylesheet">
	</head>
	<body role="document">
		<div class="container-fluid" role="main">
			<div>
				<h2 class="page-header">Client Mapping Tool</h2>
			</div>
			<div class="panel-group" id="mapHolder">
				<div class="panel panel-default">
					<div class="panel panel-heading">
						<h4 class="panel-title">
							<a data-toggle="collapse" data-target="#mapDiv">
								Map
							</a>
						</h4>
					</div>
					<div class="collapse" id="mapDiv">
						<div class="panel panel-body">
							<div id="map" style="height: 700px;">
							</div>
						</div>
					</div>
				</div>
				<div class="panel panel-default">
					<div class="panel panel-heading">
						<h4 class="panel-title">
							<a data-toggle="collapse" data-target="#loadDiv">
							Upload Data
							</a>
						</h4>
					</div>
					<div class="collapse in" id="loadDiv">
						<div class="panel panel-body">
							<div class="btn-group">
								<input type=file id="file" name="file" class="btn btn-default"></input>
								<button type=button class="btn btn-info" onclick="submitData()" id="goButton">
									Submit Data
								</button>
							</div>
							<div class="page-header">
								<h4>
									Instructions
								</h4>
							</div>
								<div>
									<p>
										The data set <strong>must</strong> contain (as a minimum) the following things...
									</p>
									<ul>
										<li>
											Provider, SWIFT ID and Post Code for each client you wish to map. The order of each column is not important.
										</li>
										<li>
											The top of each column must have the words "Provider", "SWIFT ID" and "Post Code" exactly as written, (without the "").
										</li>
										<li>
											And it <strong>must</strong> be saved as a .csv file.
										</li>
									</ul>
								</div>
						</div>
					</div>
				</div>
				<div class="panel panel-default">
					<div class="panel panel-heading">
						<h4 class="panel-title">
							<a data-toggle="collapse" data-target="#optDiv">
							Options
							</a>
						</h4>
					</div>
					<div class="collapse" id="optDiv">
						<div class="panel panel-body">
							<div class="well">
								<h3>
									Errors
								</h3>
								<p>
									Any clients that do not have a recognised Post Code will be displayed here.
								</p>
								<textarea id="Errors" name="Errors" style="width: 100%; height: 200px;"></textarea>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		<script src="http://code.jquery.com/jquery-1.9.1.js"></script>
		<script src="http://jquery-csv.googlecode.com/git/src/jquery.csv.js"></script>
		<script src="http://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.3/leaflet.js"></script>
		<script src="http://maps.stamen.com/js/tile.stamen.js?v1.3.0"></script>
		<!--List of Colours-->
		<script src="colours.js"></script>
		<!--Postcode Data-->
		<script src="PCODES.js"></script>
		<!--Bootstrap Script -->
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
		<script>
			var mapLong = 0.7;
			var mapLat = 51.2;
			var mapZoom = 9;
			var map = L.map("map").setView([mapLat, mapLong],mapZoom);
			var layer = new L.StamenTileLayer("toner");
			layer.addTo(map);
			map.attributionControl.addAttribution('Map tiles by <a href="http://stamen.com">Stamen Design</a>, under <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a>. Data by <a href="http://openstreetmap.org">OpenStreetMap</a>, under <a href="http://www.openstreetmap.org/copyright">ODbL</a>.');
			//L.tileLayer("http://a.tile.openstreetmap.org/{z}/{x}/{y}.png",{attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a>'}).addTo(map);
			
			function submitData(){
				var files = document.getElementById("file").files;
				if (files.length != 0){
					document.getElementById("goButton").innerHTML = "Loading File... <i class='fa fa-spinner fa-pulse'></i>"
					document.getElementById("goButton").className = "btn btn-warning"
					var file = files[0];
					var reader = new FileReader();
					reader.readAsText(file);
					reader.onload = function (event) {
						var csv = event.target.result;
						var data = $.csv.toArrays(csv);
						loadData(data);
					}
					reader.onerror = function (event){
						alert("Unable to read "+file.filename);
					}
				}
				else{
					alert("No file selected! \nPlease select a file and try again");
				}
			}
			
			function loadData(data){
				var builtArray = arrayBuilder(data);
				var codedArray = addCoOrds(builtArray,PCODES);
				plotPoints(codedArray);
			}
			
			function plotPoints(codedArray){
				var providers = L.layerGroup();
				var providerlist = {};
				var usedColours = {};
				for(row in codedArray){
					if(codedArray[row]["lat"] == null){
						document.getElementById("Errors").innerHTML = document.getElementById("Errors").innerHTML + "Cannot find Lat/Long data for: "+codedArray[row]["SWIFT ID"]+" @ "+codedArray[row]["Post Code"] + "\n";
					}
					else{
						var name = codedArray[row]["Provider"];
						var ID = codedArray[row]["SWIFT ID"];
						if(name != undefined){
							if(usedColours[name]){
								var colour = usedColours[name];
							}
							else{
								var colour = colours[Math.floor((Math.random() * colours.length) + 1)];
								colours.splice(colours.indexOf(colour),1);
								usedColours[name] = colour;
							}
						}
						var circle = L.circle([codedArray[row]["lat"], codedArray[row]["lng"]], 20, {color:colour});
						circle.bindPopup("(" + ID + ") \n" + name);
						if(providers.hasLayer(this [name])){
							this[name].addLayer(circle);
						}
						else{
							this[name] = L.layerGroup();
							providers.addLayer(this[name]);
							this[name].addLayer(circle);
							providerlist[name + " (" + colour + ")"] = this [name];
						}
					}
				}
				providers.addTo(map);
				L.control.layers(null, providerlist).addTo(map);
				document.getElementById("goButton").className = "btn btn-success disabled";
				document.getElementById("goButton").innerHTML = "Loaded <span class='glyphicon glyphicon-ok' aria-hidden='true'></span>";					
			}
			
			function arrayBuilder(data){
				var dataArray = [];
				for(row in data){
					if(row != 0){
						var arrayPart = {};
						var list = data[row];
						for (item in list){
							arrayPart[labels[item]] = list[item];
						}
						dataArray.push(arrayPart);
					}
					else{
						var labels = data[row];
					}
				}
				return dataArray;
			}
			
			function addCoOrds(builtArray,pCodes){
				for (row in builtArray){
					var line = builtArray[row];
					if(line["Post Code"] != ""){
						var lineCode = line["Post Code"];
						if (lineCode.indexOf(" ") != -1){
							var straightCode = lineCode.replace(" ","");
						}
						for(search in pCodes){
							var searcher  = pCodes[search];
							if(straightCode == searcher["PCODE"]){
								if(searcher["lat"] != ""){
									line["lat"] = Number(searcher["lat"]);
								}
								if(searcher["lng"] != ""){
									line["lng"] = Number(searcher["lng"]);
								}
							}
						}
						if(builtArray[row]["lat"] == 0){
							alert("Cannot find data for "+line["SWIFT ID"]);
							delete line;
						}
						if(builtArray[row]["lng"] == 0){
							alert("Cannot find data for "+line["SWIFT ID"]);
							delete line;
						}
					}
				}
				return builtArray;
			}
		</script>
	</body>
</html>
